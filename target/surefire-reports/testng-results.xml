<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="15" passed="15" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-10-06T22:12:26 IST" name="Surefire suite" finished-at="2025-10-06T22:12:26 IST" duration-ms="219">
    <groups>
      <group name="negative">
        <method signature="AttendanceServiceTest.testDuplicateClockInThrows()[pri:2, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testDuplicateClockInThrows" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="EmployeeServiceTest.testAddDuplicateEmployeeThrows()[pri:2, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddDuplicateEmployeeThrows" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="AttendanceServiceTest.testClockOutWithoutClockInThrows()[pri:3, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockOutWithoutClockInThrows" class="com.company.attendance.service.AttendanceServiceTest"/>
      </group> <!-- negative -->
      <group name="attendance-tests">
        <method signature="AttendanceServiceTest.testClockInSuccess(int)[pri:1, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockInSuccess" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="AttendanceServiceTest.testDuplicateClockInThrows()[pri:2, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testDuplicateClockInThrows" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="AttendanceServiceTest.testClockOutWithoutClockInThrows()[pri:3, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockOutWithoutClockInThrows" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="AttendanceServiceTest.testClockOutSuccess_calculatesHours()[pri:4, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockOutSuccess_calculatesHours" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="AttendanceServiceTest.testPreventDuplicateClockInsSameDay()[pri:5, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testPreventDuplicateClockInsSameDay" class="com.company.attendance.service.AttendanceServiceTest"/>
      </group> <!-- attendance-tests -->
      <group name="workflow">
        <method signature="LeaveServiceTest.testApproveLeave_changesStatus()[pri:2, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApproveLeave_changesStatus" class="com.company.attendance.service.LeaveServiceTest"/>
        <method signature="LeaveServiceTest.testRejectLeave_changesStatus()[pri:4, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testRejectLeave_changesStatus" class="com.company.attendance.service.LeaveServiceTest"/>
      </group> <!-- workflow -->
      <group name="leave-tests">
        <method signature="LeaveServiceTest.testApplyForLeave_success()[pri:1, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApplyForLeave_success" class="com.company.attendance.service.LeaveServiceTest"/>
        <method signature="LeaveServiceTest.testApproveLeave_changesStatus()[pri:2, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApproveLeave_changesStatus" class="com.company.attendance.service.LeaveServiceTest"/>
        <method signature="LeaveServiceTest.testApplyForLeave_invalidDateRange()[pri:3, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApplyForLeave_invalidDateRange" class="com.company.attendance.service.LeaveServiceTest"/>
        <method signature="LeaveServiceTest.testRejectLeave_changesStatus()[pri:4, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testRejectLeave_changesStatus" class="com.company.attendance.service.LeaveServiceTest"/>
      </group> <!-- leave-tests -->
      <group name="employee-tests">
        <method signature="EmployeeServiceTest.testAddEmployeeSuccess()[pri:1, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddEmployeeSuccess" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="EmployeeServiceTest.testAddDuplicateEmployeeThrows()[pri:2, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddDuplicateEmployeeThrows" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="EmployeeServiceTest.testGetAllEmployees()[pri:3, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testGetAllEmployees" class="com.company.attendance.service.EmployeeServiceTest"/>
      </group> <!-- employee-tests -->
      <group name="smoke">
        <method signature="AttendanceServiceTest.testClockInSuccess(int)[pri:1, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockInSuccess" class="com.company.attendance.service.AttendanceServiceTest"/>
        <method signature="EmployeeServiceTest.testAddEmployeeSuccess()[pri:1, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddEmployeeSuccess" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="LeaveServiceTest.testApplyForLeave_success()[pri:1, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApplyForLeave_success" class="com.company.attendance.service.LeaveServiceTest"/>
      </group> <!-- smoke -->
      <group name="state">
        <method signature="EmployeeServiceTest.testGetAllEmployees()[pri:3, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testGetAllEmployees" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="AttendanceServiceTest.testClockOutSuccess_calculatesHours()[pri:4, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testClockOutSuccess_calculatesHours" class="com.company.attendance.service.AttendanceServiceTest"/>
      </group> <!-- state -->
      <group name="employee">
        <method signature="EmployeeServiceTest.testAddEmployeeSuccess()[pri:1, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddEmployeeSuccess" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="EmployeeServiceTest.testAddDuplicateEmployeeThrows()[pri:2, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testAddDuplicateEmployeeThrows" class="com.company.attendance.service.EmployeeServiceTest"/>
        <method signature="EmployeeServiceTest.testGetAllEmployees()[pri:3, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" name="testGetAllEmployees" class="com.company.attendance.service.EmployeeServiceTest"/>
      </group> <!-- employee -->
      <group name="reporting-tests">
        <method signature="EmployeeRepositoryTest.testGenerateAttendanceReport_and_monthlyHours()[pri:1, instance:com.company.attendance.repository.EmployeeRepositoryTest@1d082e88]" name="testGenerateAttendanceReport_and_monthlyHours" class="com.company.attendance.repository.EmployeeRepositoryTest"/>
      </group> <!-- reporting-tests -->
      <group name="temporal">
        <method signature="LeaveServiceTest.testApplyForLeave_invalidDateRange()[pri:3, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" name="testApplyForLeave_invalidDateRange" class="com.company.attendance.service.LeaveServiceTest"/>
        <method signature="AttendanceServiceTest.testPreventDuplicateClockInsSameDay()[pri:5, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" name="testPreventDuplicateClockInsSameDay" class="com.company.attendance.service.AttendanceServiceTest"/>
      </group> <!-- temporal -->
    </groups>
    <test started-at="2025-10-06T22:12:26 IST" name="Surefire test" finished-at="2025-10-06T22:12:26 IST" duration-ms="219">
      <class name="com.company.attendance.service.EmployeeServiceTest">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="setUpClass" finished-at="2025-10-06T22:12:26 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAddEmployeeSuccess()[pri:1, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="testAddEmployeeSuccess" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddEmployeeSuccess -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="tearDown" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method signature="testAddDuplicateEmployeeThrows()[pri:2, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="testAddDuplicateEmployeeThrows" finished-at="2025-10-06T22:12:26 IST" duration-ms="2" status="PASS">
          <exception class="com.company.attendance.exception.DuplicateEmployeeException">
            <message>
              <![CDATA[Employee with email bob@example.com already exists!]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.company.attendance.exception.DuplicateEmployeeException: Employee with email bob@example.com already exists!
at com.company.attendance.service.EmployeeService.addEmployee(EmployeeService.java:21)
at com.company.attendance.service.EmployeeServiceTest.testAddDuplicateEmployeeThrows(EmployeeServiceTest.java:49)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:151)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:192)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:93)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
]]>
            </full-stacktrace>
          </exception> <!-- com.company.attendance.exception.DuplicateEmployeeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddDuplicateEmployeeThrows -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="tearDown" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAllEmployees()[pri:3, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="testGetAllEmployees" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllEmployees -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.company.attendance.service.EmployeeServiceTest@5db250b4]" started-at="2025-10-06T22:12:26 IST" name="tearDown" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.company.attendance.service.EmployeeServiceTest -->
      <class name="com.company.attendance.service.LeaveServiceTest">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="setUpClass" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="testApplyForLeave_success()[pri:1, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="testApplyForLeave_success" finished-at="2025-10-06T22:12:26 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApplyForLeave_success -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testApproveLeave_changesStatus()[pri:2, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="testApproveLeave_changesStatus" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApproveLeave_changesStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testApplyForLeave_invalidDateRange()[pri:3, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="testApplyForLeave_invalidDateRange" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApplyForLeave_invalidDateRange -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRejectLeave_changesStatus()[pri:4, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="testRejectLeave_changesStatus" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRejectLeave_changesStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.LeaveServiceTest@223f3642]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.company.attendance.service.LeaveServiceTest -->
      <class name="com.company.attendance.repository.EmployeeRepositoryTest">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:com.company.attendance.repository.EmployeeRepositoryTest@1d082e88]" started-at="2025-10-06T22:12:26 IST" name="setUpClass" finished-at="2025-10-06T22:12:26 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.repository.EmployeeRepositoryTest@1d082e88]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGenerateAttendanceReport_and_monthlyHours()[pri:1, instance:com.company.attendance.repository.EmployeeRepositoryTest@1d082e88]" started-at="2025-10-06T22:12:26 IST" name="testGenerateAttendanceReport_and_monthlyHours" finished-at="2025-10-06T22:12:26 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateAttendanceReport_and_monthlyHours -->
      </class> <!-- com.company.attendance.repository.EmployeeRepositoryTest -->
      <class name="com.company.attendance.service.AttendanceServiceTest">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUpClass" finished-at="2025-10-06T22:12:26 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testClockInSuccess(int)[pri:1, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testClockInSuccess" data-provider="employeeIds" finished-at="2025-10-06T22:12:26 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClockInSuccess -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testClockInSuccess(int)[pri:1, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testClockInSuccess" data-provider="employeeIds" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClockInSuccess -->
        <test-method signature="testClockInSuccess(int)[pri:1, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testClockInSuccess" data-provider="employeeIds" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClockInSuccess -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDuplicateClockInThrows()[pri:2, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testDuplicateClockInThrows" finished-at="2025-10-06T22:12:26 IST" depends-on-methods="com.company.attendance.service.AttendanceServiceTest.testClockInSuccess" duration-ms="2" status="PASS">
          <exception class="com.company.attendance.exception.InvalidAttendanceException">
            <message>
              <![CDATA[Employee 1 has already clocked in today!]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.company.attendance.exception.InvalidAttendanceException: Employee 1 has already clocked in today!
at com.company.attendance.service.AttendanceService.clockIn(AttendanceService.java:23)
at com.company.attendance.service.AttendanceServiceTest.testDuplicateClockInThrows(AttendanceServiceTest.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:151)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:192)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:93)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
]]>
            </full-stacktrace>
          </exception> <!-- com.company.attendance.exception.InvalidAttendanceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateClockInThrows -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testClockOutWithoutClockInThrows()[pri:3, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testClockOutWithoutClockInThrows" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <exception class="com.company.attendance.exception.InvalidAttendanceException">
            <message>
              <![CDATA[Employee 99 cannot clock out without clocking in!]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.company.attendance.exception.InvalidAttendanceException: Employee 99 cannot clock out without clocking in!
at com.company.attendance.service.AttendanceService.clockOut(AttendanceService.java:41)
at com.company.attendance.service.AttendanceServiceTest.testClockOutWithoutClockInThrows(AttendanceServiceTest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:151)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:192)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:93)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
]]>
            </full-stacktrace>
          </exception> <!-- com.company.attendance.exception.InvalidAttendanceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClockOutWithoutClockInThrows -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testClockOutSuccess_calculatesHours()[pri:4, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testClockOutSuccess_calculatesHours" finished-at="2025-10-06T22:12:26 IST" depends-on-methods="com.company.attendance.service.AttendanceServiceTest.testClockInSuccess" duration-ms="60" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClockOutSuccess_calculatesHours -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPreventDuplicateClockInsSameDay()[pri:5, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="testPreventDuplicateClockInsSameDay" finished-at="2025-10-06T22:12:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPreventDuplicateClockInsSameDay -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.company.attendance.service.AttendanceServiceTest@5bfa9431]" started-at="2025-10-06T22:12:26 IST" name="setUp" finished-at="2025-10-06T22:12:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.company.attendance.service.AttendanceServiceTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
